using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Data;
using System.Data.SqlClient;
using System.Management;
//using ASPSnippets.SmsAPI;
using System.Net.NetworkInformation;
using System.Configuration;
using System.Net;

public partial class _3_LogIn_3 : System.Web.UI.Page
{
    SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["Otpconstrng"].ConnectionString);
    protected void Page_Load(object sender, EventArgs e)
    {
        if(!IsPostBack)
        {

        }
    }
    protected void btnLogin_Click(object sender, EventArgs e)
    {
            SqlCommand cmd = new SqlCommand("USP_LogIn", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@UserName", txtUserName.Text);
            cmd.Parameters.AddWithValue("@Password", txtPassword.Text);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);
            //int i = dt.Rows.Count;
            if (dt.Rows.Count > 0)
            {

                //saving User Name into session
                Session["UserName"] = dt.Rows[0][1].ToString();
                lblMobile.Text = dt.Rows[0][3].ToString();
                string Ip= GetVisitorIPAddress();

                //Validating Ip
                if(Ip == "192.168.1.140")
                {
                    Response.Redirect("~/Default.aspx");
                }
                else
                {
                    RandomGenerator();
                    sendmessagetomobile();
                    txtOtp.Visible = true;
                    btnSubmitOtp.Visible = true;
                }
            }
            else
            {
                lblMsg.Visible = true;
                lblMsg.Text = "User Credentials are Invalid";
            }

    }

    public static string GetVisitorIPAddress()
    {
        bool GetLan = false;
        string visitorIPAddress = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];

        if (String.IsNullOrEmpty(visitorIPAddress))
            visitorIPAddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

        if (string.IsNullOrEmpty(visitorIPAddress))
            visitorIPAddress = HttpContext.Current.Request.UserHostAddress;

        if (string.IsNullOrEmpty(visitorIPAddress) || visitorIPAddress.Trim() == "::1")
        {
            GetLan = true;
            visitorIPAddress = string.Empty;
        }

        if (GetLan && string.IsNullOrEmpty(visitorIPAddress))
        {
            //This is for Local(LAN) Connected ID Address
            string stringHostName = Dns.GetHostName();
            //Get Ip Host Entry
            IPHostEntry ipHostEntries = Dns.GetHostEntry(stringHostName);

            //Get Ip Address From The Ip Host Entry Address List
            IPAddress[] arrIpAddress = ipHostEntries.AddressList;

            try
            {
                //Get Ip Address of InterNetwork From The Ip Host Entry Address List
                foreach (IPAddress ip in ipHostEntries.AddressList)
                {
                    if (ip.AddressFamily.ToString() == "InterNetwork")
                    {
                        visitorIPAddress = ip.ToString();
                    }
                }
                //visitorIPAddress = arrIpAddress[arrIpAddress.Length - 2].ToString();
            }
            catch
            {
                try
                {
                    visitorIPAddress = arrIpAddress[0].ToString();
                }
                catch
                {
                    try
                    {
                        arrIpAddress = Dns.GetHostAddresses(stringHostName);
                        visitorIPAddress = arrIpAddress[0].ToString();
                    }
                    catch
                    {
                        visitorIPAddress = "127.0.0.1";
                    }
                }
            }

        }


        return visitorIPAddress;
    }

    protected void RandomGenerator()
    {
        Random RandomGenerator = null;
        int intRandomNumber = 0;

        RandomGenerator = new Random();
        intRandomNumber = RandomGenerator.Next(12546, 85658564);
        lblRandom.Text = intRandomNumber.ToString();
    }

    protected void sendmessagetomobile()
    {
        SMS.APIType = SMSGateway.Site2SMS;
        SMS.MashapeKey = "5oL7CK1IacCX0IZjgmLV8AzyCkMugIn6";
        //@################### Site2sms ###################
        //ajay=8712349179,8712349179
        //ajay = 8341727484 , 8341727484
        //samba = 9963808785 , 1493568
        //eloi.elimelech@gmail.com
        //@################################################
        SMS.Username = "8712349179";
        SMS.Password = "8712349179";
        string Msg = "Your OTP is " + lblRandom.Text;
        if (lblMobile.Text.Trim().IndexOf(",") == -1)
        {
            //Single SMS
            SMS.SendSms(lblMobile.Text.Trim(), Msg.Trim());
        }
        else
        {
            //Multiple SMS
            List<string> numbers = lblMobile.Text.Trim().Split(',').ToList();
            SMS.SendSms(numbers, Msg.Trim());
        }
    }
    protected void btnSubmitOtp_Click(object sender, EventArgs e)
    {
        if (txtOtp.Text == lblRandom.Text)
        {
            Response.Redirect("Welcom.aspx");
        }
        else
        {
            lblMsg.Visible = true;
            lblMsg.Text = "Otp Mis-Match";
        }
    }
}
 
